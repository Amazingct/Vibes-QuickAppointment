---
alwaysApply: true
description: Backend utilities usage guidelines for file operations and email services
globs: backend/**/*.py
---

# Backend Utilities Usage Guidelines

## File Operations - Always Use utils.files

For ANY file operation related to cloud storage (DigitalOcean Spaces), temporary files, or file management, ALWAYS use the utilities from [utils/files.py](mdc:backend/utils/files.py):

### Required Imports
```python
from utils.files import (
    upload_to_spaces,
    download_from_spaces,
    delete_from_spaces,
    delete_local_file,
    upload_flask_file_to_spaces,
    download_from_spaces_url,
    TempDirectoryManager,
    SpacesManager
)
```

### File Upload Operations
- **ALWAYS use**: `upload_to_spaces(local_path, spaces_key)` 
- **Returns**: Public URL string on success, None on failure
- **Flask files**: `upload_flask_file_to_spaces(file_obj, spaces_key, content_type, make_unique=True)`
- **Unique names**: All uploads automatically get unique names with UUIDs
- **Never use**: Direct boto3 or manual S3 operations

### File Download Operations  
- **ALWAYS use**: `download_from_spaces(spaces_key, local_path)`
- **Returns**: Local file path string on success, None on failure
- **From URL**: `download_from_spaces_url(spaces_url, download_folder="Downloaded")`
- **Download location**: Use `Downloaded/` directory for persistent downloads
- **Auto-creates directories**: Automatically creates target directory if it doesn't exist
- **Unique names**: Downloaded files get unique names to prevent conflicts
- **Never use**: Direct boto3 download operations

### File Deletion Operations
- **For Spaces**: `delete_from_spaces(spaces_key)` - Returns bool
- **For Local**: `delete_local_file(file_path)` - Returns bool

### Temporary Directory Operations
- **ALWAYS use**: `TempDirectoryManager.get_temp_dir()` context manager
- **Auto-cleanup**: Directory automatically deleted when context exits
```python
with TempDirectoryManager.get_temp_dir() as temp_dir:
    # Work with files in temp_dir
    # Automatic cleanup when done
```

## Email Operations - Always Use utils.mail

For ANY email-related operation, ALWAYS use the utilities from [utils/mail.py](mdc:backend/utils/mail.py):

### Required Imports
```python
from utils.mail import (
    send_welcome_email,
    send_verification_email, 
    send_password_reset_email,
    create_mail_service,
    EmailRecipient,
    EmailContent
)
```

### Common Email Operations
- **Welcome emails**: `send_welcome_email(email, name)`
- **Verification emails**: `send_verification_email(email, name, link)`
- **Password reset**: `send_password_reset_email(email, name, link)`

### Custom Email Operations
```python
mail_service = create_mail_service()
recipient = EmailRecipient(email="user@example.com", name="User Name")
content = EmailContent(subject="...", text="...", html="...")
success = mail_service.send_email([recipient], content)
```

## Configuration Integration

Both file and mail utilities are integrated with [config.py](mdc:backend/config.py):

- **Spaces Configuration**: Uses `Config.SPACES_*` variables
- **Mail Configuration**: Uses `Config.MAILTRAP`, `Config.SENDER_EMAIL`, `Config.SENDER_NAME`
- **Environment Loading**: Automatically loads from `.env` file via config

## Flask Route Integration Examples

### File Upload Endpoint
```python
@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file in request"}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No file selected"}), 400
    
    # Upload directly from Flask file object (recommended)
    public_url = upload_flask_file_to_spaces(
        file, 
        f"uploads/{user_id}/{file.filename}",
        content_type=file.content_type,
        make_unique=True  # Ensures unique filename
    )
    
    if public_url:
        return jsonify({"url": public_url, "message": "Upload successful"})
    else:
        return jsonify({"error": "Upload failed"}), 500
```

### Email Notification Endpoint
```python
@app.route('/send-welcome', methods=['POST'])
def send_welcome():
    data = request.get_json()
    
    success = send_welcome_email(data['email'], data['name'])
    
    return jsonify({
        "message": "Welcome email sent!" if success else "Email failed",
        "success": success
    })
```

## Error Handling

Both utilities return consistent types for error handling:

### File Operations
```python
# Upload returns URL or None
public_url = upload_to_spaces(local_path, spaces_key)
if not public_url:
    # Handle upload failure
    
# Download returns path or None  
downloaded_path = download_from_spaces(spaces_key, local_path)
if not downloaded_path:
    # Handle download failure
```

### Email Operations
```python
# Email functions return boolean
success = send_welcome_email(email, name)
if not success:
    # Handle email failure
```

## NEVER Do These Things

### ❌ Don't Use Direct boto3
```python
# NEVER do this
import boto3
client = boto3.client('s3', ...)
client.upload_file(...)
```

### ❌ Don't Use Direct mailtrap
```python
# NEVER do this  
import mailtrap
client = mailtrap.MailtrapClient(...)
```

### ❌ Don't Hardcode Configuration
```python
# NEVER do this
endpoint_url = "https://sfo3.digitaloceanspaces.com"
api_key = "hardcoded-key"
```

## Always Use the Utils!

- ✅ **Consistent**: Same interface across all backend code
- ✅ **Configured**: Automatically uses correct settings from config
- ✅ **Error Handled**: Proper logging and error management  
- ✅ **Production Ready**: Tested and optimized for production use
- ✅ **Maintainable**: Single source of truth for file and email operations